generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

/**
 * =========================
 * AUTH / RÔLES
 * =========================
 */

model User {
  id           String   @id @default(uuid())
  email        String   @unique
  passwordHash String
  firstName    String?
  lastName     String?
  role         Role     @default(USER)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  refreshTokens         RefreshToken[]
  customer              Customer?
  franchiseUsers        FranchiseUser[]
  auditLogs             AuditLog[]
  FranchiseeApplication FranchiseeApplication[]

  @@index([role])
}

model RefreshToken {
  id        String    @id @default(uuid())
  token     String    @unique
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userAgent String?
  ip        String?
  revokedAt DateTime?
  createdAt DateTime  @default(now())
  expiresAt DateTime

  @@index([userId])
}

model Customer {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  phone       String?
  defaultCity String?
  defaultZip  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  loyaltyCard LoyaltyCard?
  orders      CustomerOrder[]
  events      EventRegistration[]
  loyaltyTxns LoyaltyTransaction[]
}

model FranchiseUser {
  id              String  @id @default(uuid())
  userId          String
  franchiseeId    String
  roleInFranchise String?

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  franchisee Franchisee @relation(fields: [franchiseeId], references: [id], onDelete: Cascade)

  @@unique([userId, franchiseeId])
  @@index([franchiseeId])
}

enum Role {
  USER
  ADMIN
  HQ_STAFF
  FRANCHISEE
  CUSTOMER
}

/**
 * =========================
 * FRANCHISES / CONTRAT
 * =========================
 */

model Franchisee {
  id                 String     @id @default(uuid())
  name               String
  siren              String     @unique
  contactEmail       String?
  contactPhone       String?
  billingAddress     String?
  joinDate           DateTime?
  active             Boolean    @default(true)
  defaultWarehouseId String?
  defaultWarehouse   Warehouse? @relation("DefaultWarehouse", fields: [defaultWarehouseId], references: [id], onDelete: SetNull)

  agreements     FranchiseAgreement[]
  franchiseUsers FranchiseUser[]
  trucks         Truck[]
  purchaseOrders PurchaseOrder[]
  customerOrders CustomerOrder[]
  events         Event[]
  revenueReports RevenueShareReport[]
  deployments    TruckDeployment[]
  salesSummaries SalesSummary[]

  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  FranchiseeApplication FranchiseeApplication[]
}

model FranchiseAgreement {
  id           String     @id @default(uuid())
  franchiseeId String
  franchisee   Franchisee @relation(fields: [franchiseeId], references: [id], onDelete: Cascade)

  startDate       DateTime
  endDate         DateTime?
  entryFeeAmount  Decimal   @db.Decimal(12, 2)
  revenueSharePct Decimal   @db.Decimal(5, 4)

  notes String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([franchiseeId, startDate])
}

/**
 * =========================
 * CAMIONS / DÉPLOIEMENTS / MAINTENANCE
 * =========================
 */

model Location {
  id              String  @id @default(uuid())
  name            String
  address         String?
  city            String?
  postalCode      String?
  lat             Float?
  lng             Float?
  isRecurringSpot Boolean @default(false)

  deployments TruckDeployment[]
  events      Event[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Truck {
  id           String      @id @default(uuid())
  franchiseeId String?
  franchisee   Franchisee? @relation(fields: [franchiseeId], references: [id], onDelete: Cascade)

  warehouseId String?
  warehouse   Warehouse? @relation(fields: [warehouseId], references: [id], onDelete: SetNull)

  vin           String      @unique
  plateNumber   String      @unique
  model         String?
  purchaseDate  DateTime?
  active        Boolean     @default(true)
  currentStatus TruckStatus @default(AVAILABLE)

  deployments  TruckDeployment[]
  maintenances TruckMaintenance[]
  orders       CustomerOrder[]

  // relations stock camion
  truckInventory TruckInventory[]
  stockMovements StockMovement[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([franchiseeId])
}

model TruckDeployment {
  id           String     @id @default(uuid())
  truckId      String
  truck        Truck      @relation(fields: [truckId], references: [id], onDelete: Cascade)
  franchiseeId String
  franchisee   Franchisee @relation(fields: [franchiseeId], references: [id], onDelete: Cascade)
  locationId   String?
  location     Location?  @relation(fields: [locationId], references: [id], onDelete: SetNull)

  plannedStart DateTime
  plannedEnd   DateTime?
  actualStart  DateTime?
  actualEnd    DateTime?
  notes        String?

  createdAt DateTime @default(now())

  @@index([truckId, plannedStart])
  @@index([franchiseeId, plannedStart])
  @@index([locationId, plannedStart])
}

model TruckMaintenance {
  id      String @id @default(uuid())
  truckId String
  truck   Truck  @relation(fields: [truckId], references: [id], onDelete: Cascade)

  type        MaintenanceType   @default(SERVICE)
  status      MaintenanceStatus @default(PLANNED)
  scheduledAt DateTime?
  completedAt DateTime?
  cost        Decimal?          @db.Decimal(12, 2)
  notes       String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([truckId, status])
}

enum TruckStatus {
  AVAILABLE
  DEPLOYED
  IN_MAINTENANCE
  OUT_OF_SERVICE
}

enum MaintenanceType {
  SERVICE
  REPAIR
  INSPECTION
}

enum MaintenanceStatus {
  PLANNED
  IN_PROGRESS
  DONE
}

/**
 * =========================
 * ENTREPÔTS / FOURNISSEURS / PRODUITS / STOCKS
 * =========================
 */

model Warehouse {
  id         String  @id @default(uuid())
  name       String
  address    String?
  city       String?
  postalCode String?
  lat        Float?
  lng        Float?
  hasKitchen Boolean @default(true)
  active     Boolean @default(true)
  trucks     Truck[]

  inventories        WarehouseInventory[]
  movements          StockMovement[]
  purchaseOrders     PurchaseOrder[]
  customerOrders     CustomerOrder[]
  franchiseesDefault Franchisee[]         @relation("DefaultWarehouse")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Supplier {
  id           String  @id @default(uuid())
  name         String
  contactEmail String?
  contactPhone String?
  address      String?
  active       Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          String      @id @default(uuid())
  sku         String      @unique
  name        String
  type        ProductType @default(INGREDIENT)
  unit        Unit        @default(UNIT)
  isCoreStock Boolean     @default(true)
  active      Boolean     @default(true)

  /// Limite par camion pour cet article (null = pas de plafond)
  maxPerTruck Decimal? @db.Decimal(12, 3)

  prices             ProductPrice[]
  inventories        WarehouseInventory[]
  movements          StockMovement[]
  purchaseOrderLines PurchaseOrderLine[]
  menuItems          MenuItem[]

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  TruckInventory TruckInventory[]

  @@index([type, isCoreStock])
}

enum ProductType {
  INGREDIENT
  PREPARED_DISH
  BEVERAGE
  MISC
}

enum Unit {
  KG
  L
  UNIT
}

model ProductPrice {
  id        String    @id @default(uuid())
  productId String
  product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  validFrom DateTime
  validTo   DateTime?
  priceHT   Decimal   @db.Decimal(12, 2)
  tvaPct    Decimal   @db.Decimal(5, 2)

  createdAt DateTime @default(now())

  @@index([productId, validFrom])
}

model WarehouseInventory {
  id          String  @id @default(uuid())
  warehouseId String
  productId   String
  onHand      Decimal @db.Decimal(12, 3)
  reserved    Decimal @default(0) @db.Decimal(12, 3)

  warehouse Warehouse @relation(fields: [warehouseId], references: [id], onDelete: Cascade)
  product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade)

  updatedAt DateTime @updatedAt

  @@unique([warehouseId, productId])
  @@index([productId])
}

model TruckInventory {
  id        String  @id @default(uuid())
  truckId   String
  productId String
  onHand    Decimal @db.Decimal(12, 3)
  reserved  Decimal @default(0) @db.Decimal(12, 3)

  truck   Truck   @relation(fields: [truckId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Restrict)

  updatedAt DateTime @updatedAt

  @@unique([truckId, productId])
  @@index([productId])
}

model StockMovement {
  id String @id @default(uuid())

  warehouseId String? // optionnel (mouvements d’entrepôt)
  truckId     String? // optionnel (mouvements de camion)
  productId   String
  qty         Decimal       @db.Decimal(12, 3) // + = entrée, - = sortie
  type        StockMoveType

  // Référence fonctionnelle (pour retrouver l’origine)
  refType String?
  refId   String?

  createdAt DateTime @default(now())

  warehouse Warehouse? @relation(fields: [warehouseId], references: [id], onDelete: Cascade)
  truck     Truck?     @relation(fields: [truckId], references: [id], onDelete: Cascade)
  product   Product    @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([warehouseId, truckId, productId, createdAt])
  @@index([refType, refId])
}

enum StockMoveType {
  PURCHASE_IN
  TRANSFER_IN
  TRANSFER_OUT
  SALE_OUT
  ADJUSTMENT
}

/**
 * =========================
 * APPRO FRANCHISÉS (80/20)
 * =========================
 */

model PurchaseOrder {
  id           String   @id @default(uuid())
  franchiseeId String
  warehouseId  String
  orderedAt    DateTime @default(now())
  status       POStatus @default(DRAFT)

  // champs calculés optionnels
  corePct Decimal? @db.Decimal(6, 5)
  freePct Decimal? @db.Decimal(6, 5)

  franchisee Franchisee          @relation(fields: [franchiseeId], references: [id], onDelete: Cascade)
  warehouse  Warehouse           @relation(fields: [warehouseId], references: [id], onDelete: Cascade)
  lines      PurchaseOrderLine[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([franchiseeId, status])
  @@index([warehouseId, status])
}

model PurchaseOrderLine {
  id              String  @id @default(uuid())
  purchaseOrderId String
  productId       String
  qty             Decimal @db.Decimal(12, 3)
  unitPriceHT     Decimal @db.Decimal(12, 2)
  tvaPct          Decimal @db.Decimal(5, 2)

  // snapshot core/free pour contrôle 80/20
  isCoreItem Boolean

  purchaseOrder PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  product       Product       @relation(fields: [productId], references: [id], onDelete: Restrict)

  @@index([purchaseOrderId])
  @@index([productId])
}

enum POStatus {
  DRAFT
  SUBMITTED
  PREPARING
  READY
  DELIVERED
  CANCELLED
}

/**
 * =========================
 * VENTE / COMMANDES CLIENT / PAIEMENTS
 * =========================
 */

model MenuItem {
  id        String   @id @default(uuid())
  productId String?
  product   Product? @relation(fields: [productId], references: [id], onDelete: SetNull)

  name        String
  description String?
  isActive    Boolean @default(true)
  priceHT     Decimal @db.Decimal(12, 2)
  tvaPct      Decimal @db.Decimal(5, 2)

  // 🔥 Nouveau champ
  imageUrl String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orderLines CustomerOrderLine[]
}

model CustomerOrder {
  id                String      @id @default(uuid())
  customerId        String
  franchiseeId      String
  truckId           String?
  warehouseId       String?
  channel           Channel     @default(IN_PERSON)
  status            OrderStatus @default(PENDING)
  scheduledPickupAt DateTime?
  placedAt          DateTime    @default(now())
  totalHT           Decimal     @db.Decimal(12, 2)
  totalTVA          Decimal     @db.Decimal(12, 2)
  totalTTC          Decimal     @db.Decimal(12, 2)

  customer   Customer   @relation(fields: [customerId], references: [id], onDelete: Restrict)
  franchisee Franchisee @relation(fields: [franchiseeId], references: [id], onDelete: Restrict)
  truck      Truck?     @relation(fields: [truckId], references: [id], onDelete: SetNull)
  warehouse  Warehouse? @relation(fields: [warehouseId], references: [id], onDelete: SetNull)

  lines    CustomerOrderLine[]
  payments Payment[]
  invoice  Invoice?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([franchiseeId, placedAt])
  @@index([customerId, placedAt])
  @@index([status])
}

model CustomerOrderLine {
  id              String  @id @default(uuid())
  customerOrderId String
  menuItemId      String
  qty             Int
  unitPriceHT     Decimal @db.Decimal(12, 2)
  tvaPct          Decimal @db.Decimal(5, 2)
  lineTotalHT     Decimal @db.Decimal(12, 2)

  order    CustomerOrder @relation(fields: [customerOrderId], references: [id], onDelete: Cascade)
  menuItem MenuItem      @relation(fields: [menuItemId], references: [id], onDelete: Restrict)

  @@index([customerOrderId])
  @@index([menuItemId])
}

model Payment {
  id        String          @id @default(uuid())
  provider  PaymentProvider
  purpose   PaymentPurpose
  amount    Int
  currency  String          @default("EUR")
  status    PaymentStatus   @default(PENDING)
  paidAt    DateTime?
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  customerOrderId String?
  order           CustomerOrder? @relation(fields: [customerOrderId], references: [id], onDelete: Cascade)

  franchiseeApplicationId String?                @unique
  franchiseeApplication   FranchiseeApplication? @relation(fields: [franchiseeApplicationId], references: [id])

  providerSessionId       String? @unique
  providerPaymentIntentId String? @unique

  @@index([customerOrderId, status])
  @@index([provider, purpose, status])
}

model Invoice {
  id              String   @id @default(uuid())
  customerOrderId String   @unique
  invoiceNumber   String   @unique
  issuedAt        DateTime @default(now())
  pdfUrl          String?

  order CustomerOrder @relation(fields: [customerOrderId], references: [id], onDelete: Cascade)
}

enum Channel {
  IN_PERSON
  ONLINE_PREORDER
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY
  FULFILLED
  CANCELLED
}

enum PaymentProvider {
  CARD
  CASH
  ONLINE
  STRIPE
}

enum PaymentPurpose {
  ORDER
  FRANCHISE_ENTRY_FEE
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

/**
 * =========================
 * FIDÉLITÉ
 * =========================
 */

model LoyaltyCard {
  id         String   @id @default(uuid())
  customerId String   @unique
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  cardNumber      String               @unique
  points          Int                  @default(0)
  tier            LoyaltyTier          @default(BASIC)
  transactions    LoyaltyTransaction[]
  printablePdfUrl String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LoyaltyTransaction {
  id            String      @id @default(uuid())
  loyaltyCardId String
  loyaltyCard   LoyaltyCard @relation(fields: [loyaltyCardId], references: [id], onDelete: Cascade)

  type      LoyaltyTxnType
  points    Int
  createdAt DateTime       @default(now())

  customerId String?
  customer   Customer? @relation(fields: [customerId], references: [id], onDelete: SetNull)

  refType String?
  refId   String?

  @@index([loyaltyCardId, createdAt])
}

enum LoyaltyTier {
  BASIC
  SILVER
  GOLD
}

enum LoyaltyTxnType {
  EARN
  SPEND
  ADJUST
}

/**
 * =========================
 * ÉVÉNEMENTS
 * =========================
 */

model Event {
  id           String     @id @default(uuid())
  franchiseeId String
  franchisee   Franchisee @relation(fields: [franchiseeId], references: [id], onDelete: Cascade)
  title        String
  description  String?
  startAt      DateTime
  endAt        DateTime?
  locationId   String?
  location     Location?  @relation(fields: [locationId], references: [id], onDelete: SetNull)
  isPublic     Boolean    @default(true)

  registrations EventRegistration[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([franchiseeId, startAt])
}

model EventRegistration {
  id           String         @id @default(uuid())
  eventId      String
  event        Event          @relation(fields: [eventId], references: [id], onDelete: Cascade)
  customerId   String
  customer     Customer       @relation(fields: [customerId], references: [id], onDelete: Cascade)
  status       EventRegStatus @default(REGISTERED)
  registeredAt DateTime       @default(now())

  @@unique([eventId, customerId])
  @@index([customerId, status])
}

enum EventRegStatus {
  REGISTERED
  CANCELLED
  ATTENDED
}

/**
 * =========================
 * REPORTING / REDEVANCE 4% / AUDIT
 * =========================
 */

model SalesSummary {
  id           String  @id @default(uuid())
  franchiseeId String
  period       String // "YYYY-MM" ou "YYYY-MM-DD"
  grossHT      Decimal @db.Decimal(14, 2)
  grossTVA     Decimal @db.Decimal(14, 2)
  grossTTC     Decimal @db.Decimal(14, 2)
  ordersCount  Int

  franchisee Franchisee @relation(fields: [franchiseeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([franchiseeId, period])
  @@index([period])
}

model RevenueShareReport {
  id              String  @id @default(uuid())
  franchiseeId    String
  period          String // "YYYY-MM"
  grossSales      Decimal @db.Decimal(14, 2)
  sharePct        Decimal @db.Decimal(5, 4)
  amountDue       Decimal @db.Decimal(14, 2)
  generatedPdfUrl String?

  franchisee Franchisee @relation(fields: [franchiseeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([franchiseeId, period])
  @@index([period])
}

model AuditLog {
  id          String   @id @default(uuid())
  actorUserId String?
  actor       User?    @relation(fields: [actorUserId], references: [id], onDelete: SetNull)
  action      String
  entity      String
  entityId    String
  payload     Json?
  createdAt   DateTime @default(now())

  @@index([entity, entityId, createdAt])
}

enum FranchiseeApplicationStatus {
  PENDING
  PAID
  FAILED
  CANCELED
}

model FranchiseeApplication {
  id              String @id @default(uuid())
  applicantUserId String
  applicantUser   User   @relation(fields: [applicantUserId], references: [id])

  companyName String
  phone       String
  depotId     String

  status FranchiseeApplicationStatus @default(PENDING)

  stripeCheckoutSessionId String? @unique
  stripePaymentIntentId   String? @unique

  payment Payment?

  franchiseeId String?
  franchisee   Franchisee? @relation(fields: [franchiseeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
